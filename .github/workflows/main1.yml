name: ACHIEVE-UI-CICD

on:
  push:
    branches:
      - "*"
    tags:
      - 'dev_v*'
      - 'uat_v*'
      - 'prod_v*'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select Environment
        options:
          - DEV
          - QA
          - UAT

jobs:
  build-and-deploy:
    name: Build and Deploy Angular Project
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install packages
        run: npm i -f

      - name: Building project
        run: ng build --base-href=/achieve/

      - name: Determine Environment
        id: env
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
        run: |
          Write-Output "Event Name: $env:GITHUB_EVENT_NAME"
          Write-Output "Ref: $env:GITHUB_REF"
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
            Write-Output "::set-output name=env::${{ github.event.inputs.environment }}"

          } elseif ($env:GITHUB_REF.StartsWith('^refs/tags/dev_v')) {
          $ENV = "DEV"
          Write-Output "Environment: $ENV"
          Write-Output "::set-output name=env::$ENV"
          } elseif ($env:GITHUB_REF.StartsWith('^refs/tags/uat_v')) {
          $ENV = "UAT"
          Write-Output "Environment: $ENV"
          Write-Output "::set-output name=env::$ENV"
          } elseif ($env:GITHUB_REF.StartsWith('^refs/tags/prod_v')) {
          $ENV = "QA"
          Write-Output "Environment: $ENV"
          Write-Output "::set-output name=env::$ENV"
          }




      - name: Deploy
        if: success()
        run: |
               $ENV = "${{ steps.env.outputs.env }}"
               echo "Environment: $ENV"
               if ($ENV -eq "DEV") {
                  Get-ChildItem -Path "C:\new-test-01-dev" | Remove-Item -Recurse -Force
                  Copy-Item -Path "dist/achieve-ui/browser/*" -Destination "C:\new-test-01-dev" -Recurse -Force
               } elseif ($ENV -eq "QA") {
                  Get-ChildItem -Path "D:\Dev Environment\Core API\PowerHCM-ui\Achieve" | Remove-Item -Recurse -Force
                  Copy-Item -Path "dist/achieve-ui/browser/*" -Destination "D:\Dev Environment\Core API\PowerHCM-ui\Achieve" -Recurse -Force
               } elseif ($ENV -eq "UAT") {
                  Get-ChildItem -Path "D:\Dev Environment\Core API\PowerHCM-ui\Achieve" | Remove-Item -Recurse -Force
                  Copy-Item -Path "dist/achieve-ui/browser/*" -Destination "D:\Dev Environment\Core API\PowerHCM-ui\Achieve" -Recurse -Force
               } else {
                  Write-Output "Invalid environment"
                  exit 1
               }


